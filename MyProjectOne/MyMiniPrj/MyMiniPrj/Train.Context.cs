//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyMiniPrj
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyMiniPrjDBEntities : DbContext
    {
        public MyMiniPrjDBEntities()
            : base("name=MyMiniPrjDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Cancellation> Cancellations { get; set; }
        public virtual DbSet<Train> Trains { get; set; }
    
        public virtual int AddTrain(Nullable<int> trainNumber, string trainName, string source, string destination, string ticketClass, Nullable<decimal> ticketPrice, Nullable<int> totalBerths, Nullable<int> availableBerths, string status, Nullable<System.TimeSpan> departureTime, Nullable<System.TimeSpan> arrivalTime, string daysOfOperation, Nullable<int> stops)
        {
            var trainNumberParameter = trainNumber.HasValue ?
                new ObjectParameter("TrainNumber", trainNumber) :
                new ObjectParameter("TrainNumber", typeof(int));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var ticketClassParameter = ticketClass != null ?
                new ObjectParameter("TicketClass", ticketClass) :
                new ObjectParameter("TicketClass", typeof(string));
    
            var ticketPriceParameter = ticketPrice.HasValue ?
                new ObjectParameter("TicketPrice", ticketPrice) :
                new ObjectParameter("TicketPrice", typeof(decimal));
    
            var totalBerthsParameter = totalBerths.HasValue ?
                new ObjectParameter("TotalBerths", totalBerths) :
                new ObjectParameter("TotalBerths", typeof(int));
    
            var availableBerthsParameter = availableBerths.HasValue ?
                new ObjectParameter("AvailableBerths", availableBerths) :
                new ObjectParameter("AvailableBerths", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var departureTimeParameter = departureTime.HasValue ?
                new ObjectParameter("DepartureTime", departureTime) :
                new ObjectParameter("DepartureTime", typeof(System.TimeSpan));
    
            var arrivalTimeParameter = arrivalTime.HasValue ?
                new ObjectParameter("ArrivalTime", arrivalTime) :
                new ObjectParameter("ArrivalTime", typeof(System.TimeSpan));
    
            var daysOfOperationParameter = daysOfOperation != null ?
                new ObjectParameter("DaysOfOperation", daysOfOperation) :
                new ObjectParameter("DaysOfOperation", typeof(string));
    
            var stopsParameter = stops.HasValue ?
                new ObjectParameter("Stops", stops) :
                new ObjectParameter("Stops", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrain", trainNumberParameter, trainNameParameter, sourceParameter, destinationParameter, ticketClassParameter, ticketPriceParameter, totalBerthsParameter, availableBerthsParameter, statusParameter, departureTimeParameter, arrivalTimeParameter, daysOfOperationParameter, stopsParameter);
        }
    
        public virtual ObjectResult<BookTicket_Result> BookTicket(Nullable<int> trainNumber, string ticketClass, string seatPreference, string passengerName, Nullable<System.DateTime> dateOfTravel, Nullable<int> numberOfTickets)
        {
            var trainNumberParameter = trainNumber.HasValue ?
                new ObjectParameter("TrainNumber", trainNumber) :
                new ObjectParameter("TrainNumber", typeof(int));
    
            var ticketClassParameter = ticketClass != null ?
                new ObjectParameter("TicketClass", ticketClass) :
                new ObjectParameter("TicketClass", typeof(string));
    
            var seatPreferenceParameter = seatPreference != null ?
                new ObjectParameter("SeatPreference", seatPreference) :
                new ObjectParameter("SeatPreference", typeof(string));
    
            var passengerNameParameter = passengerName != null ?
                new ObjectParameter("PassengerName", passengerName) :
                new ObjectParameter("PassengerName", typeof(string));
    
            var dateOfTravelParameter = dateOfTravel.HasValue ?
                new ObjectParameter("DateOfTravel", dateOfTravel) :
                new ObjectParameter("DateOfTravel", typeof(System.DateTime));
    
            var numberOfTicketsParameter = numberOfTickets.HasValue ?
                new ObjectParameter("NumberOfTickets", numberOfTickets) :
                new ObjectParameter("NumberOfTickets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BookTicket_Result>("BookTicket", trainNumberParameter, ticketClassParameter, seatPreferenceParameter, passengerNameParameter, dateOfTravelParameter, numberOfTicketsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CancelTicket(Nullable<int> bookingID, Nullable<int> numberOfTicketsToCancel, string reason)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            var numberOfTicketsToCancelParameter = numberOfTicketsToCancel.HasValue ?
                new ObjectParameter("NumberOfTicketsToCancel", numberOfTicketsToCancel) :
                new ObjectParameter("NumberOfTicketsToCancel", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CancelTicket", bookingIDParameter, numberOfTicketsToCancelParameter, reasonParameter);
        }
    
        public virtual int ChangeTicketClass(Nullable<int> bookingID, string newTicketClass)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            var newTicketClassParameter = newTicketClass != null ?
                new ObjectParameter("NewTicketClass", newTicketClass) :
                new ObjectParameter("NewTicketClass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeTicketClass", bookingIDParameter, newTicketClassParameter);
        }
    
        public virtual int DeleteTrain(Nullable<int> trainNumber)
        {
            var trainNumberParameter = trainNumber.HasValue ?
                new ObjectParameter("TrainNumber", trainNumber) :
                new ObjectParameter("TrainNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTrain", trainNumberParameter);
        }
    
        public virtual ObjectResult<PrintTicket_Result> PrintTicket(Nullable<int> bookingID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrintTicket_Result>("PrintTicket", bookingIDParameter);
        }
    
        public virtual int UpdateInactiveTrain(Nullable<int> trainNumber, string trainName, string source, string destination, string ticketClass, Nullable<decimal> ticketPrice, Nullable<int> totalBerths, Nullable<int> availableBerths, string status, Nullable<System.TimeSpan> departureTime, Nullable<System.TimeSpan> arrivalTime, string daysOfOperation, Nullable<int> stops)
        {
            var trainNumberParameter = trainNumber.HasValue ?
                new ObjectParameter("TrainNumber", trainNumber) :
                new ObjectParameter("TrainNumber", typeof(int));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var ticketClassParameter = ticketClass != null ?
                new ObjectParameter("TicketClass", ticketClass) :
                new ObjectParameter("TicketClass", typeof(string));
    
            var ticketPriceParameter = ticketPrice.HasValue ?
                new ObjectParameter("TicketPrice", ticketPrice) :
                new ObjectParameter("TicketPrice", typeof(decimal));
    
            var totalBerthsParameter = totalBerths.HasValue ?
                new ObjectParameter("TotalBerths", totalBerths) :
                new ObjectParameter("TotalBerths", typeof(int));
    
            var availableBerthsParameter = availableBerths.HasValue ?
                new ObjectParameter("AvailableBerths", availableBerths) :
                new ObjectParameter("AvailableBerths", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var departureTimeParameter = departureTime.HasValue ?
                new ObjectParameter("DepartureTime", departureTime) :
                new ObjectParameter("DepartureTime", typeof(System.TimeSpan));
    
            var arrivalTimeParameter = arrivalTime.HasValue ?
                new ObjectParameter("ArrivalTime", arrivalTime) :
                new ObjectParameter("ArrivalTime", typeof(System.TimeSpan));
    
            var daysOfOperationParameter = daysOfOperation != null ?
                new ObjectParameter("DaysOfOperation", daysOfOperation) :
                new ObjectParameter("DaysOfOperation", typeof(string));
    
            var stopsParameter = stops.HasValue ?
                new ObjectParameter("Stops", stops) :
                new ObjectParameter("Stops", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateInactiveTrain", trainNumberParameter, trainNameParameter, sourceParameter, destinationParameter, ticketClassParameter, ticketPriceParameter, totalBerthsParameter, availableBerthsParameter, statusParameter, departureTimeParameter, arrivalTimeParameter, daysOfOperationParameter, stopsParameter);
        }
    
        public virtual ObjectResult<ViewAllBookings_Result> ViewAllBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewAllBookings_Result>("ViewAllBookings");
        }
    
        public virtual ObjectResult<ViewAllCancellations_Result> ViewAllCancellations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewAllCancellations_Result>("ViewAllCancellations");
        }
    
        public virtual ObjectResult<ViewTrain_Result> ViewTrain()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewTrain_Result>("ViewTrain");
        }
    }
}
